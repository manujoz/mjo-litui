{"version":3,"file":"checkbox-interactions.js","sources":["../../client/checkbox-interactions.ts"],"sourcesContent":["import { MjoCheckboxBlurEvent, MjoCheckboxChangeEvent, MjoCheckboxFocusEvent, MjoCheckboxIndeterminateChangeEvent } from \"../../src/types/mjo-checkbox\";\r\n\r\nfunction changeCheckboxProp(prop: string, value: string | boolean): void {\r\n    const checkbox = document.getElementById(\"playground-checkbox\");\r\n    if (!checkbox) return;\r\n\r\n    if (typeof value === \"string\") {\r\n        if (prop === \"label\") {\r\n            checkbox.setAttribute(\"label\", value || \"Interactive Demo\");\r\n        } else if (value.trim() === \"\") {\r\n            // Remove attribute if empty string\r\n            checkbox.removeAttribute(prop);\r\n        } else {\r\n            checkbox.setAttribute(prop, value);\r\n        }\r\n    } else {\r\n        if (value) {\r\n            checkbox.setAttribute(prop, \"\");\r\n        } else {\r\n            checkbox.removeAttribute(prop);\r\n        }\r\n    }\r\n\r\n    // Handle mutual exclusivity of checked and indeterminate states\r\n    if (prop === \"checked\" && value === true) {\r\n        checkbox.removeAttribute(\"indeterminate\");\r\n        const indeterminateInput = document.querySelector('input[name=\"indeterminate\"]') as HTMLInputElement;\r\n        if (indeterminateInput) indeterminateInput.checked = false;\r\n    } else if (prop === \"indeterminate\" && value === true) {\r\n        checkbox.removeAttribute(\"checked\");\r\n        const checkedInput = document.querySelector('input[name=\"checked\"]') as HTMLInputElement;\r\n        if (checkedInput) checkedInput.checked = false;\r\n    }\r\n}\r\n\r\n// Initialize interactions when the page loads\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    document.querySelectorAll(\"mjo-checkbox\").forEach((checkbox) => {\r\n        // Standard change event\r\n        checkbox.addEventListener(\"change\", (ev: Event) => {\r\n            console.log(\"Standard change event:\", ev);\r\n        });\r\n\r\n        // Custom checkbox change event\r\n        checkbox.addEventListener(\"mjo-checkbox-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxChangeEvent;\r\n            const { element, checked, indeterminate, value, name, previousState } = event.detail;\r\n\r\n            console.log(\"Checkbox changed:\", {\r\n                name,\r\n                value,\r\n                checked,\r\n                indeterminate,\r\n                previousState,\r\n                element: element.tagName,\r\n            });\r\n\r\n            // Show alert for playground checkbox only\r\n            if (element.id === \"playground-checkbox\") {\r\n                let message = `Checkbox \"${name}\" changed!`;\r\n                message += `\\nState: ${indeterminate ? \"indeterminate\" : checked ? \"checked\" : \"unchecked\"}`;\r\n                message += `\\nValue: ${value}`;\r\n                message += `\\nPrevious: ${previousState.indeterminate ? \"indeterminate\" : previousState.checked ? \"checked\" : \"unchecked\"}`;\r\n\r\n                alert(message);\r\n            }\r\n        });\r\n\r\n        // Indeterminate change event\r\n        checkbox.addEventListener(\"mjo-checkbox-indeterminate-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxIndeterminateChangeEvent;\r\n            console.log(\"Checkbox indeterminate changed:\", event.detail);\r\n        });\r\n\r\n        // Focus events\r\n        checkbox.addEventListener(\"mjo-checkbox-focus\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxFocusEvent;\r\n            console.log(\"Checkbox focused:\", event.detail.element.getAttribute(\"label\"));\r\n        });\r\n\r\n        checkbox.addEventListener(\"mjo-checkbox-blur\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxBlurEvent;\r\n            console.log(\"Checkbox blurred:\", event.detail.element.getAttribute(\"label\"));\r\n        });\r\n    });\r\n\r\n    // Handle form demonstrations\r\n    const formExamples = document.querySelectorAll('mjo-checkbox[name*=\"demo\"]');\r\n    formExamples.forEach((checkbox) => {\r\n        checkbox.addEventListener(\"mjo-checkbox-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxChangeEvent;\r\n            const { checked, name, value } = event.detail;\r\n\r\n            if (checked) {\r\n                console.log(`Form field \"${name}\" with value \"${value}\" was selected`);\r\n            } else {\r\n                console.log(`Form field \"${name}\" was deselected`);\r\n            }\r\n        });\r\n    });\r\n\r\n    // Demonstrate group functionality\r\n    const preferencesGroup = document.querySelectorAll('mjo-checkbox[checkgroup=\"preferences\"]');\r\n    let preferencesSelected: string[] = [];\r\n\r\n    preferencesGroup.forEach((checkbox) => {\r\n        // Initialize with checked items\r\n        if (checkbox.hasAttribute(\"checked\")) {\r\n            preferencesSelected.push(checkbox.getAttribute(\"value\") || \"\");\r\n        }\r\n\r\n        checkbox.addEventListener(\"mjo-checkbox-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxChangeEvent;\r\n            const { checked, value } = event.detail;\r\n\r\n            if (checked && value) {\r\n                if (!preferencesSelected.includes(value)) {\r\n                    preferencesSelected.push(value);\r\n                }\r\n            } else if (value) {\r\n                preferencesSelected = preferencesSelected.filter((v) => v !== value);\r\n            }\r\n\r\n            console.log(\"Preferences selected:\", preferencesSelected);\r\n        });\r\n    });\r\n\r\n    const featuresGroup = document.querySelectorAll('mjo-checkbox[checkgroup=\"features\"]');\r\n    let featuresSelected: string[] = [];\r\n\r\n    featuresGroup.forEach((checkbox) => {\r\n        // Initialize with checked items\r\n        if (checkbox.hasAttribute(\"checked\")) {\r\n            featuresSelected.push(checkbox.getAttribute(\"value\") || \"\");\r\n        }\r\n\r\n        checkbox.addEventListener(\"mjo-checkbox-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxChangeEvent;\r\n            const { checked, value } = event.detail;\r\n\r\n            if (checked && value) {\r\n                if (!featuresSelected.includes(value)) {\r\n                    featuresSelected.push(value);\r\n                }\r\n            } else if (value) {\r\n                featuresSelected = featuresSelected.filter((v) => v !== value);\r\n            }\r\n\r\n            console.log(\"Features selected:\", featuresSelected);\r\n        });\r\n    });\r\n});\r\n\r\nwindow.changeCheckboxProp = changeCheckboxProp;\r\n\r\n// Make functions globally available\r\ndeclare global {\r\n    interface Window {\r\n        changeCheckboxProp: (prop: string, value: string | boolean) => void;\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}