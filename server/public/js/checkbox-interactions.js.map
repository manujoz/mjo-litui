{"version":3,"file":"checkbox-interactions.js","sources":["../../client/checkbox-interactions.ts"],"sourcesContent":["import { MjoCheckboxBlurEvent, MjoCheckboxChangeEvent, MjoCheckboxFocusEvent, MjoCheckboxIndeterminateChangeEvent } from \"../../src/types/mjo-checkbox\";\r\n\r\nfunction changeCheckboxProp(prop: string, value: string | boolean): void {\r\n    const checkbox = document.getElementById(\"playground-checkbox\");\r\n    if (!checkbox) return;\r\n\r\n    if (typeof value === \"string\") {\r\n        if (prop === \"label\") {\r\n            checkbox.setAttribute(\"label\", value || \"Interactive Demo\");\r\n        } else if (value.trim() === \"\") {\r\n            // Remove attribute if empty string\r\n            checkbox.removeAttribute(prop);\r\n        } else {\r\n            checkbox.setAttribute(prop, value);\r\n        }\r\n    } else {\r\n        if (value) {\r\n            checkbox.setAttribute(prop, \"\");\r\n        } else {\r\n            checkbox.removeAttribute(prop);\r\n        }\r\n    }\r\n\r\n    // Handle mutual exclusivity of checked and indeterminate states\r\n    if (prop === \"checked\" && value === true) {\r\n        checkbox.removeAttribute(\"indeterminate\");\r\n        const indeterminateInput = document.querySelector('input[name=\"indeterminate\"]') as HTMLInputElement;\r\n        if (indeterminateInput) indeterminateInput.checked = false;\r\n    } else if (prop === \"indeterminate\" && value === true) {\r\n        checkbox.removeAttribute(\"checked\");\r\n        const checkedInput = document.querySelector('input[name=\"checked\"]') as HTMLInputElement;\r\n        if (checkedInput) checkedInput.checked = false;\r\n    }\r\n}\r\n\r\n// Initialize interactions when the page loads\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    document.querySelectorAll(\"mjo-checkbox\").forEach((checkbox) => {\r\n        // Standard change event\r\n        checkbox.addEventListener(\"change\", (ev: Event) => {\r\n            console.log(\"Standard change event:\", ev);\r\n        });\r\n\r\n        // Custom checkbox change event\r\n        checkbox.addEventListener(\"mjo-checkbox-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxChangeEvent;\r\n            const { element, checked, indeterminate, value, name, previousState } = event.detail;\r\n\r\n            console.log(\"Checkbox changed:\", {\r\n                name,\r\n                value,\r\n                checked,\r\n                indeterminate,\r\n                previousState,\r\n                element: element.tagName,\r\n            });\r\n\r\n            // Show alert for playground checkbox only\r\n            if (element.id === \"playground-checkbox\") {\r\n                let message = `Checkbox \"${name}\" changed!`;\r\n                message += `\\nState: ${indeterminate ? \"indeterminate\" : checked ? \"checked\" : \"unchecked\"}`;\r\n                message += `\\nValue: ${value}`;\r\n                message += `\\nPrevious: ${previousState.indeterminate ? \"indeterminate\" : previousState.checked ? \"checked\" : \"unchecked\"}`;\r\n\r\n                alert(message);\r\n            }\r\n        });\r\n\r\n        // Indeterminate change event\r\n        checkbox.addEventListener(\"mjo-checkbox-indeterminate-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxIndeterminateChangeEvent;\r\n            console.log(\"Checkbox indeterminate changed:\", event.detail);\r\n        });\r\n\r\n        // Focus events\r\n        checkbox.addEventListener(\"mjo-checkbox-focus\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxFocusEvent;\r\n            console.log(\"Checkbox focused:\", event.detail.element.getAttribute(\"label\"));\r\n        });\r\n\r\n        checkbox.addEventListener(\"mjo-checkbox-blur\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxBlurEvent;\r\n            console.log(\"Checkbox blurred:\", event.detail.element.getAttribute(\"label\"));\r\n        });\r\n    });\r\n\r\n    // Handle form demonstrations\r\n    const formExamples = document.querySelectorAll('mjo-checkbox[name*=\"demo\"]');\r\n    formExamples.forEach((checkbox) => {\r\n        checkbox.addEventListener(\"mjo-checkbox-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxChangeEvent;\r\n            const { checked, name, value } = event.detail;\r\n\r\n            if (checked) {\r\n                console.log(`Form field \"${name}\" with value \"${value}\" was selected`);\r\n            } else {\r\n                console.log(`Form field \"${name}\" was deselected`);\r\n            }\r\n        });\r\n    });\r\n\r\n    // Demonstrate group functionality\r\n    const preferencesGroup = document.querySelectorAll('mjo-checkbox[checkgroup=\"preferences\"]');\r\n    let preferencesSelected: string[] = [];\r\n\r\n    preferencesGroup.forEach((checkbox) => {\r\n        // Initialize with checked items\r\n        if (checkbox.hasAttribute(\"checked\")) {\r\n            preferencesSelected.push(checkbox.getAttribute(\"value\") || \"\");\r\n        }\r\n\r\n        checkbox.addEventListener(\"mjo-checkbox-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxChangeEvent;\r\n            const { checked, value } = event.detail;\r\n\r\n            if (checked && value) {\r\n                if (!preferencesSelected.includes(value)) {\r\n                    preferencesSelected.push(value);\r\n                }\r\n            } else if (value) {\r\n                preferencesSelected = preferencesSelected.filter((v) => v !== value);\r\n            }\r\n\r\n            console.log(\"Preferences selected:\", preferencesSelected);\r\n        });\r\n    });\r\n\r\n    const featuresGroup = document.querySelectorAll('mjo-checkbox[checkgroup=\"features\"]');\r\n    let featuresSelected: string[] = [];\r\n\r\n    featuresGroup.forEach((checkbox) => {\r\n        // Initialize with checked items\r\n        if (checkbox.hasAttribute(\"checked\")) {\r\n            featuresSelected.push(checkbox.getAttribute(\"value\") || \"\");\r\n        }\r\n\r\n        checkbox.addEventListener(\"mjo-checkbox-change\", (ev: Event) => {\r\n            const event = ev as MjoCheckboxChangeEvent;\r\n            const { checked, value } = event.detail;\r\n\r\n            if (checked && value) {\r\n                if (!featuresSelected.includes(value)) {\r\n                    featuresSelected.push(value);\r\n                }\r\n            } else if (value) {\r\n                featuresSelected = featuresSelected.filter((v) => v !== value);\r\n            }\r\n\r\n            console.log(\"Features selected:\", featuresSelected);\r\n        });\r\n    });\r\n});\r\n\r\nwindow.changeCheckboxProp = changeCheckboxProp;\r\n\r\n// Make functions globally available\r\ndeclare global {\r\n    interface Window {\r\n        changeCheckboxProp: (prop: string, value: string | boolean) => void;\r\n    }\r\n}\r\n"],"names":["changeCheckboxProp","prop","value","checkbox","indeterminateInput","checkedInput","ev","event","element","checked","indeterminate","name","previousState","message","preferencesGroup","preferencesSelected","v","featuresGroup","featuresSelected"],"mappings":"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"}