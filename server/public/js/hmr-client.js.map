{"version":3,"file":"hmr-client.js","sources":["../../client/hmr-client.ts"],"sourcesContent":["/**\r\n * Cliente HMR mejorado para evitar bucles infinitos\r\n * Versi√≥n 3.0 - Control de estado avanzado y reconexi√≥n inteligente\r\n */\r\nclass MjoHMRClient {\r\n    private ws: WebSocket | null = null;\r\n    private reconnectAttempts = 0;\r\n    private maxReconnectAttempts = 3; // Reducido para evitar spam\r\n    private reconnectDelay = 2000; // 2 segundos base\r\n    private isConnected = false;\r\n    private isReloading = false;\r\n    private buildInProgress = false;\r\n    private lastBuildCompleteTime = 0;\r\n    private reloadCooldown = 3000; // 3 segundos de cooldown entre reloads\r\n\r\n    // Estados para prevenir bucles\r\n    private isShuttingDown = false;\r\n    private hasReloadScheduled = false;\r\n    private notificationTimeout?: number;\r\n\r\n    constructor() {\r\n        // Evitar m√∫ltiples instancias\r\n        if (window.mjoHMRClient) {\r\n            console.log(\"üî• Cliente HMR ya existe, reutilizando instancia\");\r\n            return window.mjoHMRClient;\r\n        }\r\n\r\n        window.mjoHMRClient = this;\r\n        this.init();\r\n    }\r\n\r\n    private init(): void {\r\n        console.log(\"üî• Iniciando cliente HMR v3.0...\");\r\n\r\n        // Marcar como inicializado para evitar m√∫ltiples instancias\r\n        if (window.mjHMRInitialized) {\r\n            console.log(\"üî• HMR ya inicializado, saliendo...\");\r\n            return;\r\n        }\r\n        window.mjHMRInitialized = true;\r\n\r\n        this.setupCleanupListeners();\r\n        this.connect();\r\n    }\r\n\r\n    private setupCleanupListeners(): void {\r\n        // Cleanup al cerrar/recargar la ventana\r\n        window.addEventListener(\"beforeunload\", () => {\r\n            console.log(\"üîÑ P√°gina cerr√°ndose, limpiando HMR...\");\r\n            this.isShuttingDown = true;\r\n            this.cleanup();\r\n        });\r\n\r\n        window.addEventListener(\"unload\", () => {\r\n            this.isShuttingDown = true;\r\n            this.cleanup();\r\n        });\r\n\r\n        // Cleanup cuando la p√°gina se oculta (cambio de tab, etc.)\r\n        document.addEventListener(\"visibilitychange\", () => {\r\n            if (document.hidden && this.isReloading) {\r\n                console.log(\"üîÑ P√°gina oculta durante reload, limpiando...\");\r\n                this.cleanup();\r\n            }\r\n        });\r\n    }\r\n\r\n    private cleanup(): void {\r\n        console.log(\"üßπ Limpiando cliente HMR...\");\r\n\r\n        if (this.ws) {\r\n            try {\r\n                this.ws.close(1000, \"Cleanup\");\r\n            } catch (error) {\r\n                console.log(\"‚ö†Ô∏è Error cerrando WebSocket:\", error);\r\n            }\r\n            this.ws = null;\r\n        }\r\n\r\n        this.isConnected = false;\r\n    }\r\n\r\n    private connect(): void {\r\n        // No conectar si estamos cerrando o ya hay reload programado\r\n        if (this.isShuttingDown || this.isReloading || this.hasReloadScheduled) {\r\n            console.log(\"üî• Conexi√≥n HMR saltada: estado no v√°lido\");\r\n            return;\r\n        }\r\n\r\n        if (this.isConnected) {\r\n            console.log(\"üî• Ya conectado a HMR\");\r\n            return;\r\n        }\r\n\r\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\r\n        const wsUrl = `${protocol}//${window.location.host}/hmr`;\r\n\r\n        console.log(\"üîå Conectando a WebSocket HMR:\", wsUrl);\r\n\r\n        try {\r\n            this.ws = new WebSocket(wsUrl);\r\n            this.setupEventListeners();\r\n        } catch (error) {\r\n            console.error(\"‚ùå Error creando WebSocket:\", error);\r\n            this.scheduleReconnect();\r\n        }\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        if (!this.ws) return;\r\n\r\n        this.ws.onopen = () => {\r\n            console.log(\"‚úÖ Cliente HMR conectado\");\r\n            this.isConnected = true;\r\n            this.reconnectAttempts = 0;\r\n            this.showNotification(\"üî• HMR conectado\", \"success\");\r\n        };\r\n\r\n        this.ws.onmessage = (event: MessageEvent) => {\r\n            try {\r\n                const data: HMREventData = JSON.parse(event.data);\r\n                this.handleHMREvent(data);\r\n            } catch (error) {\r\n                console.error(\"‚ùå Error parsing mensaje HMR:\", error);\r\n            }\r\n        };\r\n\r\n        this.ws.onclose = (event: CloseEvent) => {\r\n            console.log(\"‚ùå Conexi√≥n WebSocket HMR cerrada:\", event.code, event.reason);\r\n            this.isConnected = false;\r\n\r\n            // Solo reconectar si no estamos recargando intencionalmente\r\n            if (!this.isReloading && this.reconnectAttempts < this.maxReconnectAttempts) {\r\n                this.scheduleReconnect();\r\n            }\r\n        };\r\n\r\n        this.ws.onerror = (error: Event) => {\r\n            console.error(\"‚ö†Ô∏è Error en WebSocket HMR:\", error);\r\n            this.isConnected = false;\r\n        };\r\n    }\r\n\r\n    private handleHMREvent(event: HMREventData): void {\r\n        console.log(\"üì° Evento HMR recibido:\", event.type, event.data);\r\n\r\n        // Evitar procesar eventos si ya estamos recargando o cerrando\r\n        if (this.isReloading || this.isShuttingDown || this.hasReloadScheduled) {\r\n            console.log(\"üîÑ Ignorando evento HMR: estado no v√°lido\");\r\n            return;\r\n        }\r\n\r\n        switch (event.type) {\r\n            case \"build-start\":\r\n                this.buildInProgress = true;\r\n                this.showNotification(\"üî® Compilando...\", \"info\");\r\n                break;\r\n\r\n            case \"build-complete\":\r\n                this.buildInProgress = false;\r\n                this.lastBuildCompleteTime = Date.now();\r\n                this.showNotification(\"‚úÖ Compilaci√≥n completada\", \"success\");\r\n                // Programar reload con mejor control\r\n                this.scheduleReload();\r\n                break;\r\n\r\n            case \"build-error\":\r\n                this.buildInProgress = false;\r\n                this.showNotification(`‚ùå Error: ${event.data?.error || \"Error desconocido\"}`, \"error\");\r\n                // NO recargar en caso de error\r\n                break;\r\n\r\n            case \"file-changed\":\r\n                if (!this.buildInProgress) {\r\n                    const files = event.data?.files || [];\r\n                    this.showNotification(`üìù Archivos modificados: ${files.length}`, \"info\");\r\n                }\r\n                break;\r\n\r\n            case \"reload\":\r\n                this.scheduleReload();\r\n                break;\r\n\r\n            default:\r\n                console.log(\"ü§∑‚Äç‚ôÇÔ∏è Evento HMR no manejado:\", event.type);\r\n        }\r\n    }\r\n\r\n    private scheduleReload(): void {\r\n        if (this.hasReloadScheduled || this.isReloading || this.isShuttingDown) {\r\n            console.log(\"üîÑ Reload ya programado o en proceso\");\r\n            return;\r\n        }\r\n\r\n        // Verificar cooldown\r\n        const timeSinceLastBuild = Date.now() - this.lastBuildCompleteTime;\r\n        if (timeSinceLastBuild > 0 && timeSinceLastBuild < this.reloadCooldown) {\r\n            console.log(`‚è≥ Reload en cooldown, esperando ${this.reloadCooldown - timeSinceLastBuild}ms m√°s`);\r\n            setTimeout(() => this.scheduleReload(), this.reloadCooldown - timeSinceLastBuild);\r\n            return;\r\n        }\r\n\r\n        console.log(\"üîÑ Programando reload de la p√°gina...\");\r\n        this.hasReloadScheduled = true;\r\n        this.isReloading = true;\r\n        this.cleanup();\r\n\r\n        this.showNotification(\"üîÑ Recargando p√°gina...\", \"info\");\r\n\r\n        // Delay para mostrar notificaci√≥n y limpiar conexiones\r\n        setTimeout(() => {\r\n            console.log(\"üîÑ Ejecutando reload...\");\r\n            window.location.reload();\r\n        }, 800);\r\n    }\r\n\r\n    private scheduleReconnect(): void {\r\n        if (this.isReloading || this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n            if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n                console.log(\"‚ùå M√°ximo de intentos de reconexi√≥n alcanzado\");\r\n                this.showNotification(\"‚ùå HMR desconectado permanentemente\", \"error\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.reconnectAttempts++;\r\n        const delay = this.reconnectDelay * Math.pow(1.5, this.reconnectAttempts - 1);\r\n\r\n        console.log(`üîÑ Reintentando conexi√≥n en ${delay}ms (intento ${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n\r\n        setTimeout(() => {\r\n            if (!this.isReloading && !this.isConnected) {\r\n                this.connect();\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    private createNotificationContainer(): void {\r\n        // Crear contenedor de notificaciones si no existe\r\n        if (document.getElementById(\"hmr-notifications\")) return;\r\n\r\n        const container = document.createElement(\"div\");\r\n        container.id = \"hmr-notifications\";\r\n        container.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            z-index: 10000;\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            pointer-events: none;\r\n        `;\r\n        document.body.appendChild(container);\r\n    }\r\n\r\n    private showNotification(message: string, type: NotificationType = \"info\"): void {\r\n        this.createNotificationContainer();\r\n        const container = document.getElementById(\"hmr-notifications\");\r\n        if (!container) return;\r\n\r\n        // Limpiar notificaci√≥n anterior\r\n        if (this.notificationTimeout) {\r\n            clearTimeout(this.notificationTimeout);\r\n        }\r\n        container.innerHTML = \"\";\r\n\r\n        const notification = document.createElement(\"div\");\r\n\r\n        const colors: Record<NotificationType, string> = {\r\n            info: \"#3b82f6\",\r\n            success: \"#10b981\",\r\n            error: \"#ef4444\",\r\n            warning: \"#f59e0b\",\r\n        };\r\n\r\n        notification.style.cssText = `\r\n            background: ${colors[type] || colors.info};\r\n            color: white;\r\n            padding: 12px 16px;\r\n            border-radius: 6px;\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            font-size: 14px;\r\n            font-weight: 500;\r\n            margin-bottom: 8px;\r\n            transform: translateX(100%);\r\n            transition: transform 0.3s ease;\r\n            pointer-events: auto;\r\n            cursor: pointer;\r\n        `;\r\n\r\n        notification.textContent = message;\r\n        container.appendChild(notification);\r\n\r\n        // Animar entrada\r\n        requestAnimationFrame(() => {\r\n            notification.style.transform = \"translateX(0)\";\r\n        });\r\n\r\n        // Auto-hide despu√©s de 4 segundos (excepto errores permanentes)\r\n        if (type !== \"error\" || message.includes(\"desconectado permanentemente\")) {\r\n            this.notificationTimeout = window.setTimeout(() => {\r\n                notification.style.transform = \"translateX(100%)\";\r\n                setTimeout(() => {\r\n                    if (notification.parentNode) {\r\n                        notification.parentNode.removeChild(notification);\r\n                    }\r\n                }, 300);\r\n            }, 4000);\r\n        }\r\n\r\n        // Click para cerrar\r\n        notification.addEventListener(\"click\", () => {\r\n            notification.style.transform = \"translateX(100%)\";\r\n            setTimeout(() => {\r\n                if (notification.parentNode) {\r\n                    notification.parentNode.removeChild(notification);\r\n                }\r\n            }, 300);\r\n        });\r\n    }\r\n}\r\n\r\n// Solo inicializar una vez cuando el DOM est√© listo\r\nif (document.readyState === \"loading\") {\r\n    document.addEventListener(\"DOMContentLoaded\", () => {\r\n        if (!window.mjoHMRClient) {\r\n            new MjoHMRClient();\r\n        }\r\n    });\r\n} else {\r\n    if (!window.mjoHMRClient) {\r\n        new MjoHMRClient();\r\n    }\r\n}\r\n\r\ninterface HMREventData {\r\n    type: \"build-start\" | \"build-complete\" | \"build-error\" | \"file-changed\" | \"reload\";\r\n    data?: {\r\n        error?: string;\r\n        files?: string[];\r\n    };\r\n}\r\n\r\ntype NotificationType = \"info\" | \"success\" | \"error\" | \"warning\";\r\n\r\ninterface Window {\r\n    mjoHMRClient?: MjoHMRClient;\r\n    mjHMRInitialized?: boolean;\r\n}\r\n"],"names":[],"mappings":"AAIA,MAAM,aAAa;AAAA,EAgBf,cAAc;AAfd,SAAQ,KAAuB;AAC/B,SAAQ,oBAAoB;AAC5B,SAAQ,uBAAuB;AAC/B,SAAQ,iBAAiB;AACzB,SAAQ,cAAc;AACtB,SAAQ,cAAc;AACtB,SAAQ,kBAAkB;AAC1B,SAAQ,wBAAwB;AAChC,SAAQ,iBAAiB;AAGzB,SAAQ,iBAAiB;AACzB,SAAQ,qBAAqB;AAKzB,QAAI,OAAO,cAAc;AACrB,cAAQ,IAAI,kDAAkD;AAC9D,aAAO,OAAO;AAAA,IAClB;AAEA,WAAO,eAAe;AACtB,SAAK,KAAK;AAAA,EACd;AAAA,EAEQ,OAAa;AACjB,YAAQ,IAAI,kCAAkC;AAG9C,QAAI,OAAO,kBAAkB;AACzB,cAAQ,IAAI,qCAAqC;AACjD;AAAA,IACJ;AACA,WAAO,mBAAmB;AAE1B,SAAK,sBAAsB;AAC3B,SAAK,QAAQ;AAAA,EACjB;AAAA,EAEQ,wBAA8B;AAE3B,WAAA,iBAAiB,gBAAgB,MAAM;AAC1C,cAAQ,IAAI,wCAAwC;AACpD,WAAK,iBAAiB;AACtB,WAAK,QAAQ;AAAA,IAAA,CAChB;AAEM,WAAA,iBAAiB,UAAU,MAAM;AACpC,WAAK,iBAAiB;AACtB,WAAK,QAAQ;AAAA,IAAA,CAChB;AAGQ,aAAA,iBAAiB,oBAAoB,MAAM;AAC5C,UAAA,SAAS,UAAU,KAAK,aAAa;AACrC,gBAAQ,IAAI,+CAA+C;AAC3D,aAAK,QAAQ;AAAA,MACjB;AAAA,IAAA,CACH;AAAA,EACL;AAAA,EAEQ,UAAgB;AACpB,YAAQ,IAAI,6BAA6B;AAEzC,QAAI,KAAK,IAAI;AACL,UAAA;AACK,aAAA,GAAG,MAAM,KAAM,SAAS;AAAA,eACxB,OAAO;AACJ,gBAAA,IAAI,gCAAgC,KAAK;AAAA,MACrD;AACA,WAAK,KAAK;AAAA,IACd;AAEA,SAAK,cAAc;AAAA,EACvB;AAAA,EAEQ,UAAgB;AAEpB,QAAI,KAAK,kBAAkB,KAAK,eAAe,KAAK,oBAAoB;AACpE,cAAQ,IAAI,2CAA2C;AACvD;AAAA,IACJ;AAEA,QAAI,KAAK,aAAa;AAClB,cAAQ,IAAI,uBAAuB;AACnC;AAAA,IACJ;AAEA,UAAM,WAAW,OAAO,SAAS,aAAa,WAAW,SAAS;AAClE,UAAM,QAAQ,GAAG,QAAQ,KAAK,OAAO,SAAS,IAAI;AAE1C,YAAA,IAAI,kCAAkC,KAAK;AAE/C,QAAA;AACK,WAAA,KAAK,IAAI,UAAU,KAAK;AAC7B,WAAK,oBAAoB;AAAA,aACpB,OAAO;AACJ,cAAA,MAAM,8BAA8B,KAAK;AACjD,WAAK,kBAAkB;AAAA,IAC3B;AAAA,EACJ;AAAA,EAEQ,sBAA4B;AAChC,QAAI,CAAC,KAAK;AAAI;AAET,SAAA,GAAG,SAAS,MAAM;AACnB,cAAQ,IAAI,yBAAyB;AACrC,WAAK,cAAc;AACnB,WAAK,oBAAoB;AACpB,WAAA,iBAAiB,oBAAoB,SAAS;AAAA,IAAA;AAGlD,SAAA,GAAG,YAAY,CAAC,UAAwB;AACrC,UAAA;AACA,cAAM,OAAqB,KAAK,MAAM,MAAM,IAAI;AAChD,aAAK,eAAe,IAAI;AAAA,eACnB,OAAO;AACJ,gBAAA,MAAM,gCAAgC,KAAK;AAAA,MACvD;AAAA,IAAA;AAGC,SAAA,GAAG,UAAU,CAAC,UAAsB;AACrC,cAAQ,IAAI,qCAAqC,MAAM,MAAM,MAAM,MAAM;AACzE,WAAK,cAAc;AAGnB,UAAI,CAAC,KAAK,eAAe,KAAK,oBAAoB,KAAK,sBAAsB;AACzE,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IAAA;AAGC,SAAA,GAAG,UAAU,CAAC,UAAiB;AACxB,cAAA,MAAM,8BAA8B,KAAK;AACjD,WAAK,cAAc;AAAA,IAAA;AAAA,EAE3B;AAAA,EAEQ,eAAe,OAA2B;AA3ItD;AA4IQ,YAAQ,IAAI,2BAA2B,MAAM,MAAM,MAAM,IAAI;AAG7D,QAAI,KAAK,eAAe,KAAK,kBAAkB,KAAK,oBAAoB;AACpE,cAAQ,IAAI,2CAA2C;AACvD;AAAA,IACJ;AAEA,YAAQ,MAAM,MAAM;AAAA,MAChB,KAAK;AACD,aAAK,kBAAkB;AAClB,aAAA,iBAAiB,oBAAoB,MAAM;AAChD;AAAA,MAEJ,KAAK;AACD,aAAK,kBAAkB;AAClB,aAAA,wBAAwB,KAAK;AAC7B,aAAA,iBAAiB,4BAA4B,SAAS;AAE3D,aAAK,eAAe;AACpB;AAAA,MAEJ,KAAK;AACD,aAAK,kBAAkB;AACvB,aAAK,iBAAiB,cAAY,WAAM,SAAN,mBAAY,UAAS,mBAAmB,IAAI,OAAO;AAErF;AAAA,MAEJ,KAAK;AACG,YAAA,CAAC,KAAK,iBAAiB;AACvB,gBAAM,UAAQ,WAAM,SAAN,mBAAY,UAAS,CAAA;AACnC,eAAK,iBAAiB,4BAA4B,MAAM,MAAM,IAAI,MAAM;AAAA,QAC5E;AACA;AAAA,MAEJ,KAAK;AACD,aAAK,eAAe;AACpB;AAAA,MAEJ;AACY,gBAAA,IAAI,iCAAiC,MAAM,IAAI;AAAA,IAC/D;AAAA,EACJ;AAAA,EAEQ,iBAAuB;AAC3B,QAAI,KAAK,sBAAsB,KAAK,eAAe,KAAK,gBAAgB;AACpE,cAAQ,IAAI,sCAAsC;AAClD;AAAA,IACJ;AAGA,UAAM,qBAAqB,KAAK,IAAI,IAAI,KAAK;AAC7C,QAAI,qBAAqB,KAAK,qBAAqB,KAAK,gBAAgB;AACpE,cAAQ,IAAI,mCAAmC,KAAK,iBAAiB,kBAAkB,QAAQ;AAC/F,iBAAW,MAAM,KAAK,eAAA,GAAkB,KAAK,iBAAiB,kBAAkB;AAChF;AAAA,IACJ;AAEA,YAAQ,IAAI,uCAAuC;AACnD,SAAK,qBAAqB;AAC1B,SAAK,cAAc;AACnB,SAAK,QAAQ;AAER,SAAA,iBAAiB,2BAA2B,MAAM;AAGvD,eAAW,MAAM;AACb,cAAQ,IAAI,yBAAyB;AACrC,aAAO,SAAS;OACjB,GAAG;AAAA,EACV;AAAA,EAEQ,oBAA0B;AAC9B,QAAI,KAAK,eAAe,KAAK,qBAAqB,KAAK,sBAAsB;AACrE,UAAA,KAAK,qBAAqB,KAAK,sBAAsB;AACrD,gBAAQ,IAAI,8CAA8C;AACrD,aAAA,iBAAiB,sCAAsC,OAAO;AAAA,MACvE;AACA;AAAA,IACJ;AAEK,SAAA;AACC,UAAA,QAAQ,KAAK,iBAAiB,KAAK,IAAI,KAAK,KAAK,oBAAoB,CAAC;AAEpE,YAAA,IAAI,+BAA+B,KAAK,eAAe,KAAK,iBAAiB,IAAI,KAAK,oBAAoB,GAAG;AAErH,eAAW,MAAM;AACb,UAAI,CAAC,KAAK,eAAe,CAAC,KAAK,aAAa;AACxC,aAAK,QAAQ;AAAA,MACjB;AAAA,OACD,KAAK;AAAA,EACZ;AAAA,EAEQ,8BAAoC;AAEpC,QAAA,SAAS,eAAe,mBAAmB;AAAG;AAE5C,UAAA,YAAY,SAAS,cAAc,KAAK;AAC9C,cAAU,KAAK;AACf,cAAU,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQjB,aAAA,KAAK,YAAY,SAAS;AAAA,EACvC;AAAA,EAEQ,iBAAiB,SAAiB,OAAyB,QAAc;AAC7E,SAAK,4BAA4B;AAC3B,UAAA,YAAY,SAAS,eAAe,mBAAmB;AAC7D,QAAI,CAAC;AAAW;AAGhB,QAAI,KAAK,qBAAqB;AAC1B,mBAAa,KAAK,mBAAmB;AAAA,IACzC;AACA,cAAU,YAAY;AAEhB,UAAA,eAAe,SAAS,cAAc,KAAK;AAEjD,UAAM,SAA2C;AAAA,MAC7C,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,MACP,SAAS;AAAA,IAAA;AAGb,iBAAa,MAAM,UAAU;AAAA,0BACX,OAAO,IAAI,KAAK,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc7C,iBAAa,cAAc;AAC3B,cAAU,YAAY,YAAY;AAGlC,0BAAsB,MAAM;AACxB,mBAAa,MAAM,YAAY;AAAA,IAAA,CAClC;AAGD,QAAI,SAAS,WAAW,QAAQ,SAAS,8BAA8B,GAAG;AACjE,WAAA,sBAAsB,OAAO,WAAW,MAAM;AAC/C,qBAAa,MAAM,YAAY;AAC/B,mBAAW,MAAM;AACb,cAAI,aAAa,YAAY;AACZ,yBAAA,WAAW,YAAY,YAAY;AAAA,UACpD;AAAA,WACD,GAAG;AAAA,SACP,GAAI;AAAA,IACX;AAGa,iBAAA,iBAAiB,SAAS,MAAM;AACzC,mBAAa,MAAM,YAAY;AAC/B,iBAAW,MAAM;AACb,YAAI,aAAa,YAAY;AACZ,uBAAA,WAAW,YAAY,YAAY;AAAA,QACpD;AAAA,SACD,GAAG;AAAA,IAAA,CACT;AAAA,EACL;AACJ;AAGA,IAAI,SAAS,eAAe,WAAW;AAC1B,WAAA,iBAAiB,oBAAoB,MAAM;AAC5C,QAAA,CAAC,OAAO,cAAc;AACtB,UAAI,aAAa;AAAA,IACrB;AAAA,EAAA,CACH;AACL,OAAO;AACC,MAAA,CAAC,OAAO,cAAc;AACtB,QAAI,aAAa;AAAA,EACrB;AACJ;"}