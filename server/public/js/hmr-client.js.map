{"version":3,"file":"hmr-client.js","sources":["../../client/hmr-client.ts"],"sourcesContent":["/**\r\n * Enhanced HMR client to prevent infinite loops\r\n * Version 3.0 - Advanced state control and smart reconnection\r\n */\r\nclass MjoHMRClient {\r\n    private ws: WebSocket | null = null;\r\n    private reconnectAttempts = 0;\r\n    private maxReconnectAttempts = 3; // Reduced to avoid spam\r\n    private reconnectDelay = 2000; // 2 seconds base\r\n    private isConnected = false;\r\n    private isReloading = false;\r\n    private buildInProgress = false;\r\n    private lastBuildCompleteTime = 0;\r\n    private reloadCooldown = 500; // 500 milliseconds cooldown between reloads\r\n\r\n    // States to prevent loops\r\n    private isShuttingDown = false;\r\n    private hasReloadScheduled = false;\r\n    private notificationTimeout?: number;\r\n\r\n    constructor() {\r\n        // Prevent multiple instances\r\n        if (window.mjoHMRClient) {\r\n            return window.mjoHMRClient;\r\n        }\r\n\r\n        window.mjoHMRClient = this;\r\n        this.init();\r\n    }\r\n\r\n    private init(): void {\r\n        // Mark as initialized to avoid multiple instances\r\n        if (window.mjHMRInitialized) {\r\n            return;\r\n        }\r\n        window.mjHMRInitialized = true;\r\n\r\n        this.setupCleanupListeners();\r\n        this.connect();\r\n    }\r\n\r\n    private setupCleanupListeners(): void {\r\n        // Cleanup when closing/reloading the window\r\n        window.addEventListener(\"beforeunload\", () => {\r\n            this.isShuttingDown = true;\r\n            this.cleanup();\r\n        });\r\n\r\n        window.addEventListener(\"unload\", () => {\r\n            this.isShuttingDown = true;\r\n            this.cleanup();\r\n        });\r\n\r\n        // Cleanup when the page is hidden (tab change, etc.)\r\n        document.addEventListener(\"visibilitychange\", () => {\r\n            if (document.hidden && this.isReloading) {\r\n                this.cleanup();\r\n            }\r\n        });\r\n    }\r\n\r\n    private cleanup(): void {\r\n        if (this.ws) {\r\n            try {\r\n                this.ws.close(1000, \"Cleanup\");\r\n            } catch (error) {\r\n                console.warn(\"⚠️ Error closing WebSocket:\", error);\r\n            }\r\n            this.ws = null;\r\n        }\r\n\r\n        this.isConnected = false;\r\n    }\r\n\r\n    private connect(): void {\r\n        // Do not connect if shutting down or reload is already scheduled\r\n        if (this.isShuttingDown || this.isReloading || this.hasReloadScheduled) {\r\n            return;\r\n        }\r\n\r\n        if (this.isConnected) {\r\n            return;\r\n        }\r\n\r\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\r\n        const wsUrl = `${protocol}//${window.location.host}/hmr`;\r\n\r\n        try {\r\n            this.ws = new WebSocket(wsUrl);\r\n            this.setupEventListeners();\r\n        } catch (error) {\r\n            console.error(\"❌ Error creating WebSocket:\", error);\r\n            this.scheduleReconnect();\r\n        }\r\n    }\r\n\r\n    private setupEventListeners(): void {\r\n        if (!this.ws) return;\r\n\r\n        this.ws.onopen = () => {\r\n            this.isConnected = true;\r\n            this.reconnectAttempts = 0;\r\n            this.showNotification(\"🔥 HMR connected\", \"success\");\r\n        };\r\n\r\n        this.ws.onmessage = (event: MessageEvent) => {\r\n            try {\r\n                const data: HMREventData = JSON.parse(event.data);\r\n                this.handleHMREvent(data);\r\n            } catch (error) {\r\n                console.error(\"❌ Error parsing HMR message:\", error);\r\n            }\r\n        };\r\n\r\n        this.ws.onclose = (event: CloseEvent) => {\r\n            this.isConnected = false;\r\n\r\n            // Only reconnect if not intentionally reloading\r\n            if (!this.isReloading && this.reconnectAttempts < this.maxReconnectAttempts) {\r\n                this.scheduleReconnect();\r\n            }\r\n        };\r\n\r\n        this.ws.onerror = (error: Event) => {\r\n            console.error(\"⚠️ HMR WebSocket error:\", error);\r\n            this.isConnected = false;\r\n        };\r\n    }\r\n\r\n    private handleHMREvent(event: HMREventData): void {\r\n        // Avoid processing events if already reloading or shutting down\r\n        if (this.isReloading || this.isShuttingDown || this.hasReloadScheduled) {\r\n            return;\r\n        }\r\n\r\n        switch (event.type) {\r\n            case \"build-start\":\r\n                this.buildInProgress = true;\r\n                this.showNotification(\"🔨 Building...\", \"info\");\r\n                break;\r\n\r\n            case \"build-complete\":\r\n                this.buildInProgress = false;\r\n                this.lastBuildCompleteTime = Date.now();\r\n                this.showNotification(\"✅ Build completed\", \"success\");\r\n                // Schedule reload with better control\r\n                this.scheduleReload();\r\n                break;\r\n\r\n            case \"build-error\":\r\n                this.buildInProgress = false;\r\n                this.showNotification(`❌ Error: ${event.data?.error || \"Unknown error\"}`, \"error\");\r\n                // DO NOT reload in case of error\r\n                break;\r\n\r\n            case \"file-changed\":\r\n                if (!this.buildInProgress) {\r\n                    const files = event.data?.files || [];\r\n                    this.showNotification(`📝 Files changed: ${files.length}`, \"info\");\r\n                }\r\n                break;\r\n\r\n            case \"reload\":\r\n                this.scheduleReload();\r\n                break;\r\n\r\n            default:\r\n                console.warn(\"🤷‍♂️ Unhandled HMR event:\", event.type);\r\n        }\r\n    }\r\n\r\n    private scheduleReload(): void {\r\n        if (this.hasReloadScheduled || this.isReloading || this.isShuttingDown) {\r\n            return;\r\n        }\r\n\r\n        // Check cooldown\r\n        const timeSinceLastBuild = Date.now() - this.lastBuildCompleteTime;\r\n        if (timeSinceLastBuild > 0 && timeSinceLastBuild < this.reloadCooldown) {\r\n            setTimeout(() => this.scheduleReload(), this.reloadCooldown - timeSinceLastBuild);\r\n            return;\r\n        }\r\n\r\n        this.hasReloadScheduled = true;\r\n        this.isReloading = true;\r\n        this.cleanup();\r\n\r\n        this.showNotification(\"🔄 Reloading page...\", \"info\");\r\n\r\n        // Delay to show notification and clean up connections\r\n        setTimeout(() => {\r\n            window.location.reload();\r\n        }, 800);\r\n    }\r\n\r\n    private scheduleReconnect(): void {\r\n        if (this.isReloading || this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n            if (this.reconnectAttempts >= this.maxReconnectAttempts) {\r\n                console.warn(\"❌ Maximum reconnect attempts reached\");\r\n                this.showNotification(\"❌ HMR permanently disconnected\", \"error\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        this.reconnectAttempts++;\r\n        const delay = this.reconnectDelay * Math.pow(1.5, this.reconnectAttempts - 1);\r\n\r\n        setTimeout(() => {\r\n            if (!this.isReloading && !this.isConnected) {\r\n                this.connect();\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    private createNotificationContainer(): void {\r\n        // Create notification container if it does not exist\r\n        if (document.getElementById(\"hmr-notifications\")) return;\r\n\r\n        const container = document.createElement(\"div\");\r\n        container.id = \"hmr-notifications\";\r\n        container.style.cssText = `\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            z-index: 10000;\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            pointer-events: none;\r\n        `;\r\n        document.body.appendChild(container);\r\n    }\r\n\r\n    private showNotification(message: string, type: NotificationType = \"info\"): void {\r\n        this.createNotificationContainer();\r\n        const container = document.getElementById(\"hmr-notifications\");\r\n        if (!container) return;\r\n\r\n        // Clear previous notification\r\n        if (this.notificationTimeout) {\r\n            clearTimeout(this.notificationTimeout);\r\n        }\r\n        container.innerHTML = \"\";\r\n\r\n        const notification = document.createElement(\"div\");\r\n\r\n        const colors: Record<NotificationType, string> = {\r\n            info: \"#3b82f6\",\r\n            success: \"#10b981\",\r\n            error: \"#ef4444\",\r\n            warning: \"#f59e0b\",\r\n        };\r\n\r\n        notification.style.cssText = `\r\n            background: ${colors[type] || colors.info};\r\n            color: white;\r\n            padding: 12px 16px;\r\n            border-radius: 6px;\r\n            box-shadow: 0 4px 12px rgba(0,0,0,0.15);\r\n            font-size: 14px;\r\n            font-weight: 500;\r\n            margin-bottom: 8px;\r\n            transform: translateX(100%);\r\n            transition: transform 0.3s ease;\r\n            pointer-events: auto;\r\n            cursor: pointer;\r\n        `;\r\n\r\n        notification.textContent = message;\r\n        container.appendChild(notification);\r\n\r\n        // Animate entry\r\n        requestAnimationFrame(() => {\r\n            notification.style.transform = \"translateX(0)\";\r\n        });\r\n\r\n        // Auto-hide after 4 seconds (except permanent errors)\r\n        if (type !== \"error\" || message.includes(\"permanently disconnected\")) {\r\n            this.notificationTimeout = window.setTimeout(() => {\r\n                notification.style.transform = \"translateX(100%)\";\r\n                setTimeout(() => {\r\n                    if (notification.parentNode) {\r\n                        notification.parentNode.removeChild(notification);\r\n                    }\r\n                }, 300);\r\n            }, 4000);\r\n        }\r\n\r\n        // Click to close\r\n        notification.addEventListener(\"click\", () => {\r\n            notification.style.transform = \"translateX(100%)\";\r\n            setTimeout(() => {\r\n                if (notification.parentNode) {\r\n                    notification.parentNode.removeChild(notification);\r\n                }\r\n            }, 300);\r\n        });\r\n    }\r\n}\r\n\r\n// Only initialize once when DOM is ready\r\nif (document.readyState === \"loading\") {\r\n    document.addEventListener(\"DOMContentLoaded\", () => {\r\n        if (!window.mjoHMRClient) {\r\n            new MjoHMRClient();\r\n        }\r\n    });\r\n} else {\r\n    if (!window.mjoHMRClient) {\r\n        new MjoHMRClient();\r\n    }\r\n}\r\n\r\ninterface HMREventData {\r\n    type: \"build-start\" | \"build-complete\" | \"build-error\" | \"file-changed\" | \"reload\";\r\n    data?: {\r\n        error?: string;\r\n        files?: string[];\r\n    };\r\n}\r\n\r\ntype NotificationType = \"info\" | \"success\" | \"error\" | \"warning\";\r\n\r\ninterface Window {\r\n    mjoHMRClient?: MjoHMRClient;\r\n    mjHMRInitialized?: boolean;\r\n}\r\n"],"names":[],"mappings":"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"}